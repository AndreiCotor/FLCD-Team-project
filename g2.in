ArrStatement AssignStatement Condition Expression ForStatement FunctionCallStatement FunctionName IfStatement IntExpression MathematicalOperator NonZeroDigit Program ProgramBlock RelationalOperator Statement StringExpression VarStatement WhileStatement
" ( ) * + , - / ; : .. < <= = == > >= else epsilon fn for in i32 if let main print read str until vec { } Identifier StringConstant IntConstant
Program
Program -> fn main ( ) { ProgramBlock
ProgramBlock -> Statement ProgramBlock
ProgramBlock -> }
Statement -> VarStatement ;
Statement -> ArrStatement ;
Statement -> AssignStatement ;
Statement -> IfStatement
Statement -> WhileStatement
Statement -> FunctionCallStatement ;
Statement -> ForStatement
VarStatement -> let Identifier : i32
Expression -> IntExpression
Expression -> StringExpression
MathematicalOperator -> +
MathematicalOperator -> -
MathematicalOperator -> *
MathematicalOperator -> /
IntExpression -> Identifier MathematicalOperator IntConstant
StringExpression -> StringConstant
ArrStatement -> let Identifier : vec
AssignStatement -> Identifier = IntConstant
AssignStatement -> Identifier = Identifier
IfStatement -> if ( Condition ) { ProgramBlock
RelationalOperator -> ==
RelationalOperator -> <
RelationalOperator -> <=
RelationalOperator -> >
RelationalOperator -> >=
Condition -> Expression RelationalOperator Expression
Condition -> Identifier RelationalOperator Identifier
WhileStatement -> until ( Condition ) { ProgramBlock
ForStatement -> for ( Identifier in IntConstant .. Identifier ) { ProgramBlock
FunctionCallStatement -> FunctionName ( Expression )
FunctionCallStatement -> FunctionName ( Identifier )
FunctionName -> print
FunctionName -> read