ArrStatement AssignStatement Condition Expression ForStatement FunctionCallStatement FunctionName IfStatement IntExpression MathematicalOperator NonZeroDigit Program ProgramBlock RelationalOperator Statement StringExpression VarStatement WhileStatement
" ( ) * + , - / ; : .. < <= = == > >= else epsilon fn for in i32 if let main print read str until vec { } Identifier StringConstant IntConstant
Program
Program -> fn main ( ) { ProgramBlock }
ProgramBlock -> Statement ; ProgramBlock
ProgramBlock -> epsilon
Statement -> VarStatement
Statement -> ArrStatement
Statement -> AssignStatement
Statement -> IfStatement
Statement -> WhileStatement
Statement -> FunctionCallStatement
VarStatement -> let Identifier : i32
Expression -> IntExpression
Expression -> StringExpression
MathematicalOperator -> +
MathematicalOperator -> -
MathematicalOperator -> *
MathematicalOperator -> /
IntExpression -> IntConstant
IntExpression -> Identifier
IntExpression -> IntExpression MathematicalOperator IntExpression
IntExpression -> ( IntExpression MathematicalOperator IntExpression )
StringExpression -> StringConstant
StringExpression -> Identifier
ArrStatement -> let Identifier : vec
AssignStatement -> Identifier = Expression
IfStatement -> if ( Condition ) { ProgramBlock }
IfStatement -> if ( Condition ) { ProgramBlock } else { ProgramBlock }
RelationalOperator -> ==
RelationalOperator -> <
RelationalOperator -> <=
RelationalOperator -> >
RelationalOperator -> >=
Condition -> Expression RelationalOperator Expression
WhileStatement -> until ( Condition ) { ProgramBlock }
ForStatement -> for ( Identifier in IntExpression .. IntExpression ) { ProgramBlock }
FunctionCallStatement -> FunctionName ( Expression )
FunctionName -> print
FunctionName -> read